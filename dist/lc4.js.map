{"version":3,"sources":["../src/lc4.js"],"names":["ALPHABET","GRIDSIZE","ALPHABET_LS47","GRIDSIZE_LS47","shuffle","randomElement","shiftRowRight","shiftColumnDown","position","printState","generateKey","mode","alphabet","toLowerCase","join","generateNonce","length","Error","Array","fill","map","initState","key","size","characters","S","k","Math","floor","indexOf","i","char","Px","Py","shiftedRight","shiftedDown","encryptMsg","state","marker","msg","verbose","console","log","slice","row","col","step","code","x","j","y","out","decryptMsg"],"mappings":"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","sourcesContent":["/** @module lc4/lc4 */\nimport { ALPHABET, GRIDSIZE, ALPHABET_LS47, GRIDSIZE_LS47 } from \"./config.js\";\nimport {\n    shuffle,\n    randomElement,\n    shiftRowRight,\n    shiftColumnDown,\n    position,\n    printState\n} from \"./helpers.js\";\n\n/**\n * Generate a valid random LC4 or LS47 key\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Generate a random LS47 key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey(\"ls47\");\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @returns {String} a valid LC4 or LS47 key\n */\nexport function generateKey(mode = \"lc4\") {\n    let alphabet = mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47;\n\n    return shuffle([...alphabet]).join(\"\");\n}\n\n/**\n * Generate a valid random LC4 or LS47 nonce\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {Number} [length=10] length of nonce (at least 6)\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Generate a random LS47 nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce(\"ls47\");\n * @example <caption>Encrypt a message with a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\",\n *     key: generateKey(),\n *     nonce: generateNonce()\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 or LS47 nonce\n */\nexport function generateNonce(mode = \"lc4\", length = 10) {\n    if (length < 6) {\n        throw new Error(\"Nonce must be at least 6 characters long\");\n    }\n\n    return new Array(length)\n        .fill(0)\n        .map(_ =>\n            randomElement([\n                ...(mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47)\n            ])\n        )\n        .join(\"\");\n}\n\n/**\n * Populate a state matrix by filling in a key row by row or by expanding a key\n * @param {(String|Array)} key key string or array\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} state matrix\n */\nexport function initState(key, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE,\n        alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        characters = key.length === size * size ? key : alphabet;\n\n    let S = new Array(size).fill(0).map(_ => new Array(size).fill(0));\n\n    for (let k = 0; k < alphabet.length; k++) {\n        S[Math.floor(k / size)][k % size] = alphabet.indexOf(characters[k]);\n    }\n\n    if (key.length !== size * size) {\n        let i = 0;\n        for (let char of key) {\n            let Px = alphabet.indexOf(char) % size,\n                Py = Math.floor(alphabet.indexOf(char) / size);\n\n            // Rotate i-th row Px positions to the right\n            for (let shiftedRight = 0; shiftedRight < Px; shiftedRight++)\n                shiftRowRight(S, i % size, {}, mode);\n\n            // Rotate i-th column Py positions to the bottom\n            for (let shiftedDown = 0; shiftedDown < Py; shiftedDown++)\n                shiftColumnDown(S, i % size, {}, mode);\n\n            i++;\n        }\n    }\n\n    return S;\n}\n\n/**\n * Encrypt a cleartext message and change the environment\n * @param {Object} env environment object\n * @param {Array} env.state state matrix\n * @param {Object} env.marker marker object representing active element\n * @param {Number} env.marker.i row of the marker in the state\n * @param {Number} env.marker.j column of the marker in the state\n * @param {String} env.mode encryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} msg cleartext message\n * @param {Boolean} [verbose=false] boolean indicating wether verbose mode\n * should be used (will print out intermediate steps)\n * @returns {String} ciphertext message\n */\nexport function encryptMsg({ state, marker, mode }, msg, verbose = false) {\n    let alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    if (verbose) {\n        console.log(`Encrypting: ${msg}`);\n        console.log(\"step: 0\");\n        printState(state.slice(), { row: -1, col: -1 }, marker, mode);\n    }\n\n    return [...msg]\n        .map((char, step) => {\n            let code = alphabet.indexOf(char);\n            let [row, col] = position(code, state);\n\n            let x = (row + Math.floor(state[marker.i][marker.j] / size)) % size;\n            let y = (col + (state[marker.i][marker.j] % size)) % size;\n\n            let out = state[x][y];\n\n            shiftRowRight(state, row, marker, mode);\n            if (x === row) y = (y + 1) % size;\n\n            shiftColumnDown(state, y, marker, mode);\n            if (y === col) row = (row + 1) % size;\n\n            marker.i = (marker.i + Math.floor(out / size)) % size;\n            marker.j = (marker.j + (out % size)) % size;\n\n            if (verbose) {\n                console.log(`step: ${step + 1}`);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                printState(state.slice(), { row, col: y }, marker, mode);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                console.log(\n                    `pt: \\x1b[31m${char}\\x1b[0m  ct: \\x1b[31m${\n                        alphabet[out]\n                    }\\x1b[0m`,\n                    \"\\n\"\n                );\n            }\n\n            return alphabet[out];\n        })\n        .join(\"\");\n}\n\n/**\n * Decrypt a ciphertext message and change the environment\n * @param {Object} env environment object\n * @param {Array} env.state state matrix\n * @param {Object} env.marker marker object representing active element\n * @param {Number} env.marker.i row of the marker in the state\n * @param {Number} env.marker.j column of the marker in the state\n * @param {Strin} env.mode decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} msg ciphertext message\n * @param {Boolean} [verbose=false] boolean indicating wether verbose mode\n * should be used (will print out intermediate steps)\n * @returns {String} cleartext message\n */\nexport function decryptMsg({ state, marker, mode }, msg, verbose) {\n    let alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    if (verbose) {\n        console.log(`Decrypting: ${msg}`);\n        console.log(\"step: 0\");\n        printState(state.slice(), { row: -1, col: -1 }, marker, mode);\n    }\n\n    return [...msg]\n        .map((char, step) => {\n            let code = alphabet.indexOf(char);\n            let [x, y] = position(code, state);\n\n            let row = (x - Math.floor(state[marker.i][marker.j] / size)) % size;\n            let col = (y - (state[marker.i][marker.j] % size)) % size;\n\n            if (row < 0) row += size;\n            if (col < 0) col += size;\n\n            let out = state[row][col];\n\n            shiftRowRight(state, row, marker, mode);\n            if (x === row) y = (y + 1) % size;\n\n            shiftColumnDown(state, y, marker, mode);\n            if (y === col) row = (row + 1) % size;\n\n            marker.i = (marker.i + Math.floor(code / size)) % size;\n            marker.j = (marker.j + (code % size)) % size;\n\n            if (verbose) {\n                console.log(`step: ${step + 1}`);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                printState(state.slice(), { row, col: y }, marker, mode);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                console.log(\n                    `ct: \\x1b[31m${char}\\x1b[0m  pt: \\x1b[31m${\n                        alphabet[out]\n                    }\\x1b[0m`,\n                    \"\\n\"\n                );\n            }\n\n            return alphabet[out];\n        })\n        .join(\"\");\n}\n"],"file":"lc4.js"}