{"version":3,"file":"lc4.js","names":["ALPHABET","GRIDSIZE","ALPHABET_LS47","GRIDSIZE_LS47","shuffle","randomElement","shiftRowRight","shiftColumnDown","position","printState","generateKey","mode","alphabet","toLowerCase","join","generateNonce","length","Error","Array","fill","map","initState","key","size","characters","S","k","Math","floor","indexOf","i","char","Px","Py","shiftedRight","shiftedDown","encryptMsg","state","marker","msg","verbose","console","log","slice","row","col","step","code","x","j","y","out","decryptMsg"],"sources":["../src/lc4.js"],"sourcesContent":["/** @module lc4/lc4 */\nimport { ALPHABET, GRIDSIZE, ALPHABET_LS47, GRIDSIZE_LS47 } from \"./config.js\";\nimport {\n    shuffle,\n    randomElement,\n    shiftRowRight,\n    shiftColumnDown,\n    position,\n    printState\n} from \"./helpers.js\";\n\n/**\n * Generate a valid random LC4 or LS47 key\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Generate a random LS47 key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey(\"ls47\");\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @returns {String} a valid LC4 or LS47 key\n */\nexport function generateKey(mode = \"lc4\") {\n    let alphabet = mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47;\n\n    return shuffle([...alphabet]).join(\"\");\n}\n\n/**\n * Generate a valid random LC4 or LS47 nonce\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {Number} [length=10] length of nonce (at least 6)\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Generate a random LS47 nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce(\"ls47\");\n * @example <caption>Encrypt a message with a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\",\n *     key: generateKey(),\n *     nonce: generateNonce()\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 or LS47 nonce\n */\nexport function generateNonce(mode = \"lc4\", length = 10) {\n    if (length < 6) {\n        throw new Error(\"Nonce must be at least 6 characters long\");\n    }\n\n    return new Array(length)\n        .fill(0)\n        .map(_ =>\n            randomElement([\n                ...(mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47)\n            ])\n        )\n        .join(\"\");\n}\n\n/**\n * Populate a state matrix by filling in a key row by row or by expanding a key\n * @param {(String|Array)} key key string or array\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} state matrix\n */\nexport function initState(key, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE,\n        alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        characters = key.length === size * size ? key : alphabet;\n\n    let S = new Array(size).fill(0).map(_ => new Array(size).fill(0));\n\n    for (let k = 0; k < alphabet.length; k++) {\n        S[Math.floor(k / size)][k % size] = alphabet.indexOf(characters[k]);\n    }\n\n    if (key.length !== size * size) {\n        let i = 0;\n        for (let char of key) {\n            let Px = alphabet.indexOf(char) % size,\n                Py = Math.floor(alphabet.indexOf(char) / size);\n\n            // Rotate i-th row Px positions to the right\n            for (let shiftedRight = 0; shiftedRight < Px; shiftedRight++)\n                shiftRowRight(S, i % size, {}, mode);\n\n            // Rotate i-th column Py positions to the bottom\n            for (let shiftedDown = 0; shiftedDown < Py; shiftedDown++)\n                shiftColumnDown(S, i % size, {}, mode);\n\n            i++;\n        }\n    }\n\n    return S;\n}\n\n/**\n * Encrypt a cleartext message and change the environment\n * @param {Object} env environment object\n * @param {Array} env.state state matrix\n * @param {Object} env.marker marker object representing active element\n * @param {Number} env.marker.i row of the marker in the state\n * @param {Number} env.marker.j column of the marker in the state\n * @param {String} env.mode encryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} msg cleartext message\n * @param {Boolean} [verbose=false] boolean indicating wether verbose mode\n * should be used (will print out intermediate steps)\n * @returns {String} ciphertext message\n */\nexport function encryptMsg({ state, marker, mode }, msg, verbose = false) {\n    let alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    if (verbose) {\n        console.log(`Encrypting: ${msg}`);\n        console.log(\"step: 0\");\n        printState(state.slice(), { row: -1, col: -1 }, marker, mode);\n    }\n\n    return [...msg]\n        .map((char, step) => {\n            let code = alphabet.indexOf(char);\n            let [row, col] = position(code, state);\n\n            let x = (row + Math.floor(state[marker.i][marker.j] / size)) % size;\n            let y = (col + (state[marker.i][marker.j] % size)) % size;\n\n            let out = state[x][y];\n\n            shiftRowRight(state, row, marker, mode);\n            if (x === row) y = (y + 1) % size;\n\n            shiftColumnDown(state, y, marker, mode);\n            if (y === col) row = (row + 1) % size;\n\n            marker.i = (marker.i + Math.floor(out / size)) % size;\n            marker.j = (marker.j + (out % size)) % size;\n\n            if (verbose) {\n                console.log(`step: ${step + 1}`);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                printState(state.slice(), { row, col: y }, marker, mode);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                console.log(\n                    `pt: \\x1b[31m${char}\\x1b[0m  ct: \\x1b[31m${alphabet[out]}\\x1b[0m`,\n                    \"\\n\"\n                );\n            }\n\n            return alphabet[out];\n        })\n        .join(\"\");\n}\n\n/**\n * Decrypt a ciphertext message and change the environment\n * @param {Object} env environment object\n * @param {Array} env.state state matrix\n * @param {Object} env.marker marker object representing active element\n * @param {Number} env.marker.i row of the marker in the state\n * @param {Number} env.marker.j column of the marker in the state\n * @param {Strin} env.mode decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} msg ciphertext message\n * @param {Boolean} [verbose=false] boolean indicating wether verbose mode\n * should be used (will print out intermediate steps)\n * @returns {String} cleartext message\n */\nexport function decryptMsg({ state, marker, mode }, msg, verbose) {\n    let alphabet = mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET,\n        size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    if (verbose) {\n        console.log(`Decrypting: ${msg}`);\n        console.log(\"step: 0\");\n        printState(state.slice(), { row: -1, col: -1 }, marker, mode);\n    }\n\n    return [...msg]\n        .map((char, step) => {\n            let code = alphabet.indexOf(char);\n            let [x, y] = position(code, state);\n\n            let row = (x - Math.floor(state[marker.i][marker.j] / size)) % size;\n            let col = (y - (state[marker.i][marker.j] % size)) % size;\n\n            if (row < 0) row += size;\n            if (col < 0) col += size;\n\n            let out = state[row][col];\n\n            shiftRowRight(state, row, marker, mode);\n            if (x === row) y = (y + 1) % size;\n\n            shiftColumnDown(state, y, marker, mode);\n            if (y === col) row = (row + 1) % size;\n\n            marker.i = (marker.i + Math.floor(code / size)) % size;\n            marker.j = (marker.j + (code % size)) % size;\n\n            if (verbose) {\n                console.log(`step: ${step + 1}`);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                printState(state.slice(), { row, col: y }, marker, mode);\n                console.log(new Array(size * 3 - 2).fill(\"-\").join(\"\"));\n                console.log(\n                    `ct: \\x1b[31m${char}\\x1b[0m  pt: \\x1b[31m${alphabet[out]}\\x1b[0m`,\n                    \"\\n\"\n                );\n            }\n\n            return alphabet[out];\n        })\n        .join(\"\");\n}\n"],"mappings":"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"}