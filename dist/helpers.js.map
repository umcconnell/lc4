{"version":3,"sources":["../src/helpers.js"],"names":["ALPHABET","ALPHABET_LS47","GRIDSIZE","GRIDSIZE_LS47","escapeString","string","mode","replace","toLowerCase","filter","char","indexOf","join","shuffle","arr","slice","temp","i","l","length","Math","floor","random","randomElement","shiftRowRight","state","row","marker","size","j","shiftColumnDown","col","shiftRow","last","map","position","vector","column","printState","chara","JSON","parse","stringify","markerChar","console","log","out","validString","input","alphabet","every"],"mappings":"AACA,OAASA,QAAT,CAAmBC,aAAnB,CAAkCC,QAAlC,CAA4CC,aAA5C,KAAiE,aAAjE,CAYA,MAAO,SAASC,CAAAA,YAAT,CAAsBC,CAAtB,CAA8BC,CAAI,CAAG,KAArC,CAA4C,CAG/C,MAFa,KAAT,GAAAA,CAEJ,GAFoBD,CAAM,CAAGA,CAAM,CAACE,OAAP,CAAe,IAAf,CAAqB,GAArB,EAA0BA,OAA1B,CAAkC,IAAlC,CAAwC,GAAxC,CAE7B,EAAO,CACH,GAAGF,CAAM,CACJE,OADF,CACU,SADV,CACqB,IADrB,EAEEA,OAFF,CAEU,SAFV,CAEqB,IAFrB,EAGEA,OAHF,CAGU,SAHV,CAGqB,IAHrB,EAIEA,OAJF,CAIU,SAJV,CAIqB,IAJrB,EAKEA,OALF,CAKU,SALV,CAKqB,IALrB,EAMEA,OANF,CAMU,SANV,CAMqB,IANrB,EAOEA,OAPF,CAOU,SAPV,CAOqB,IAPrB,EAQEA,OARF,CAQU,KARV,CAQiB,GARjB,EASEC,WATF,EADA,EAYFC,MAZE,CAaCC,CAAI,EAC6D,CAAC,CAA9D,EAAU,MAAT,GAAAJ,CAAI,CAAcL,aAAd,CAA8BD,QAAnC,EAA6CW,OAA7C,CAAqDD,CAArD,CAdL,EAgBFE,IAhBE,CAgBG,EAhBH,CAiBV,CAOD,MAAO,SAASC,CAAAA,OAAT,CAAiBC,CAAjB,CAAsB,CAEzBA,CAAG,CAAGA,CAAG,CAACC,KAAJ,EAFmB,KAMzB,GACIC,CAAAA,CADJ,CAEIC,CAFJ,CAAIC,CAAC,CAAGJ,CAAG,CAACK,MANa,CAUlBD,CAVkB,EAWrBD,CAAC,CAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBJ,CAAC,EAA5B,CAXiB,CAarBF,CAAI,CAAGF,CAAG,CAACI,CAAD,CAbW,CAcrBJ,CAAG,CAACI,CAAD,CAAH,CAASJ,CAAG,CAACG,CAAD,CAdS,CAerBH,CAAG,CAACG,CAAD,CAAH,CAASD,CAfY,CAkBzB,MAAOF,CAAAA,CACV,CAOD,MAAO,SAASS,CAAAA,aAAT,CAAuBT,CAAvB,CAA4B,CAC/B,MAAOA,CAAAA,CAAG,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBR,CAAG,CAACK,MAA/B,CAAD,CACb,CAaD,MAAO,SAASK,CAAAA,aAAT,CAAuBC,CAAvB,CAA8BC,CAA9B,CAAmCC,CAAnC,CAA2CrB,CAAI,CAAG,KAAlD,CAAyD,CAC5D,GAAIsB,CAAAA,CAAI,CAAY,MAAT,GAAAtB,CAAI,CAAcH,aAAd,CAA8BD,QAA7C,CASA,MAPAuB,CAAAA,CAAK,CAACC,CAAD,CAAL,CAAa,CACTD,CAAK,CAACC,CAAD,CAAL,CAAWD,CAAK,CAACC,CAAD,CAAL,CAAWP,MAAX,CAAoB,CAA/B,CADS,CAET,GAAGM,CAAK,CAACC,CAAD,CAAL,CAAWX,KAAX,CAAiB,CAAjB,CAAoB,CAAC,CAArB,CAFM,CAOb,CAFIY,CAAM,CAACV,CAAP,GAAaS,CAEjB,GAFsBC,CAAM,CAACE,CAAP,CAAW,CAACF,CAAM,CAACE,CAAP,CAAW,CAAZ,EAAiBD,CAElD,EAAOH,CACV,CAaD,MAAO,SAASK,CAAAA,eAAT,CAAyBL,CAAzB,CAAgCM,CAAhC,CAAqCJ,CAArC,CAA6CrB,CAAI,CAAG,KAApD,CAA2D,CAC9D,GAAIsB,CAAAA,CAAI,CAAY,MAAT,GAAAtB,CAAI,CAAcH,aAAd,CAA8BD,QAA7C,CACI8B,CAAQ,CAAGJ,CAAI,CAAG,CADtB,CAEIK,CAAI,CAAGR,CAAK,CAACO,CAAD,CAAL,CAAgBD,CAAhB,CAFX,CAcA,MAVAN,CAAAA,CAAK,CAAGA,CAAK,CAACS,GAAN,CAAUR,CAAG,EAAI,CACrB,GAAIV,CAAAA,CAAI,CAAGU,CAAG,CAACK,CAAD,CAAd,CAIA,MAHAL,CAAAA,CAAG,CAACK,CAAD,CAAH,CAAWE,CAGX,CAFAA,CAAI,CAAGjB,CAEP,CADAgB,CAAQ,CAAG,CAACA,CAAQ,CAAG,CAAZ,EAAiBJ,CAC5B,CAAOF,CACV,CANO,CAUR,CAFIC,CAAM,CAACE,CAAP,GAAaE,CAEjB,GAFsBJ,CAAM,CAACV,CAAP,CAAW,CAACU,CAAM,CAACV,CAAP,CAAW,CAAZ,EAAiBW,CAElD,EAAOH,CACV,CAQD,MAAO,SAASU,CAAAA,QAAT,CAAkBzB,CAAlB,CAAwBe,CAAxB,CAA+B,CAClC,GAAIW,CAAAA,CAAM,CAAG,EAAb,CAEA,IAAK,GACGC,CAAAA,CADH,CAAIX,CAAG,CAAG,CAAf,CAAkBA,CAAG,CAAGD,CAAK,CAACN,MAA9B,CAAsCO,CAAG,EAAzC,CAGI,GAFIW,CAEJ,CAFaZ,CAAK,CAACC,CAAD,CAAL,CAAWf,OAAX,CAAmBD,CAAnB,CAEb,CAAa,CAAC,CAAV,CAAA2B,CAAJ,CAAiB,CACbD,CAAM,CAAG,CAACV,CAAD,CAAMW,CAAN,CADI,CAEb,KACH,CAGL,MAAOD,CAAAA,CACV,CAiBD,MAAO,SAASE,CAAAA,UAAT,CAAoBb,CAApB,CAA2Bc,CAA3B,CAAkCZ,CAAlC,CAA0CrB,CAAI,CAAG,KAAjD,CAAwD,CAE3DmB,CAAK,CAAGe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAejB,CAAf,CAAX,EAAkCS,GAAlC,CAAsCR,CAAG,EAC7CA,CAAG,CAACQ,GAAJ,CAAQxB,CAAI,EAAI,CAAU,MAAT,GAAAJ,CAAI,CAAcL,aAAd,CAA8BD,QAAnC,EAA6CU,CAA7C,CAAhB,CADI,CAFmD,CAM3D,GAAIiC,CAAAA,CAAU,CAAG,kBAAjB,CACAlB,CAAK,CAACE,CAAM,CAACV,CAAR,CAAL,CAAgBU,CAAM,CAACE,CAAvB,qBAP2D,CAS3De,OAAO,CAACC,GAAR,CACIpB,CAAK,CACAS,GADL,CACS,CAACR,CAAD,CAAMT,CAAN,GAAY,CACb,GAAI6B,CAAAA,CAAG,CAAGpB,CAAG,CACRQ,GADK,CACD,CAACxB,CAAD,CAAOmB,CAAP,GACDZ,CAAC,GAAKsB,CAAK,CAACb,GAAZ,EAAmBG,CAAC,GAAKU,CAAK,CAACR,GAA/B,CACO,WAAUrB,CAAK,SADtB,CAEMA,CAJJ,EAMLE,IANK,CAMA,IANA,CAAV,CAQA,MAAOK,CAAAA,CAAC,GAAKU,CAAM,CAACV,CAAb,CACD6B,CAAG,CAACvC,OAAJ,CAAa,GAAEoC,CAAW,GAA1B,CAA8BA,CAA9B,CADC,CAEDG,CACT,CAbL,EAcKlC,IAdL,CAcU,IAdV,CADJ,CAiBH,CASD,MAAO,SAASmC,CAAAA,WAAT,CAAqBC,CAArB,CAA4B1C,CAAI,CAAG,KAAnC,CAA0C,CAC7C,GAAI2C,CAAAA,CAAQ,CAA0B,KAAvB,GAAA3C,CAAI,CAACE,WAAL,GAA+BR,QAA/B,CAA0CC,aAAzD,CACA,MAAO+C,CAAAA,CAAK,CAACE,KAAN,CAAYxC,CAAI,EAA6B,CAAC,CAA1B,CAAAuC,CAAQ,CAACtC,OAAT,CAAiBD,CAAjB,CAApB,CACV","sourcesContent":["/** @module lc4/helpers */\nimport { ALPHABET, ALPHABET_LS47, GRIDSIZE, GRIDSIZE_LS47 } from \"./config.js\";\n\n/**\n * Escape string to valid LC4 or LS47 string\n * @param {String} string (invalid) LC4 or LS47 string\n * @param {String} [mode=\"lc4\"] Escape mode (either \"lc4\" or \"ls47\")\n * @example\n * escapeString(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 or LS47 string\n */\nexport function escapeString(string, mode = \"lc4\") {\n    if (mode === \"lc4\") string = string.replace(/0/g, \"#\").replace(/1/g, \"_\");\n\n    return [\n        ...string\n            .replace(/\\u00dc/g, \"Ue\")\n            .replace(/\\u00fc/g, \"ue\")\n            .replace(/\\u00c4/g, \"Ae\")\n            .replace(/\\u00e4/g, \"ae\")\n            .replace(/\\u00d6/g, \"Oe\")\n            .replace(/\\u00f6/g, \"oe\")\n            .replace(/\\u00df/g, \"ss\")\n            .replace(/\\s/g, \"_\")\n            .toLowerCase()\n    ]\n        .filter(\n            char =>\n                (mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET).indexOf(char) > -1\n        )\n        .join(\"\");\n}\n\n/**\n * Fisher-Yates array Shuffle\n * @param {Array} arr input array to be shuffled\n * @returns {Array} shuffled array\n */\nexport function shuffle(arr) {\n    // Copy the array\n    arr = arr.slice();\n\n    // Fisher-Yates Shuffle\n    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n    let l = arr.length,\n        temp,\n        i;\n\n    while (l) {\n        i = Math.floor(Math.random() * l--);\n\n        temp = arr[l];\n        arr[l] = arr[i];\n        arr[i] = temp;\n    }\n\n    return arr;\n}\n\n/**\n * Pick a random element from an array\n * @param {Array} arr input array to pick element from\n * @returns {*} a random element from the array\n */\nexport function randomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\n/**\n * Shift given row in the state matrix and move the marker if needed\n * @param {Array} state state matrix\n * @param {Number} row index of row to shift\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} updated state matrix\n */\nexport function shiftRowRight(state, row, marker, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    state[row] = [\n        state[row][state[row].length - 1],\n        ...state[row].slice(0, -1)\n    ];\n\n    if (marker.i === row) marker.j = (marker.j + 1) % size;\n\n    return state;\n}\n\n/**\n * Shift given column in the state matrix and move the marker if needed\n * @param {Array} state state matrix\n * @param {Number} col index of column to shift\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} updated state matrix\n */\nexport function shiftColumnDown(state, col, marker, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE,\n        shiftRow = size - 1,\n        last = state[shiftRow][col];\n\n    state = state.map(row => {\n        let temp = row[col];\n        row[col] = last;\n        last = temp;\n        shiftRow = (shiftRow + 1) % size;\n        return row;\n    });\n\n    if (marker.j === col) marker.i = (marker.i + 1) % size;\n\n    return state;\n}\n\n/**\n * Return the coordinates of given search element in the state matrix\n * @param {*} char search element\n * @param {Array} state state matrix\n * @returns {Array} position vector in the form [`row`, `column`]\n */\nexport function position(char, state) {\n    let vector = [];\n\n    for (let row = 0; row < state.length; row++) {\n        let column = state[row].indexOf(char);\n\n        if (column > -1) {\n            vector = [row, column];\n            break;\n        }\n    }\n\n    return vector;\n}\n\n/**\n * Print out state for verbose mode\n * @param {Array} state state array to print out\n * @param {Object} chara input character reference being encrypted/decrypted\n * @param {Number} chara.row row of input character in the state matrix\n * (-1 for no input character)\n * @param {Number} chara.col column of input character in the state matrix\n * (-1 for no input character)\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {undefined}\n */\nexport function printState(state, chara, marker, mode = \"lc4\") {\n    // Deep-copy state\n    state = JSON.parse(JSON.stringify(state)).map(row =>\n        row.map(char => (mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)[char])\n    );\n\n    let markerChar = \"\\x1b[31m@\\x1b[0m\";\n    state[marker.i][marker.j] += markerChar;\n\n    console.log(\n        state\n            .map((row, i) => {\n                let out = row\n                    .map((char, j) =>\n                        i === chara.row || j === chara.col\n                            ? `\\x1b[32m${char}\\x1b[0m`\n                            : char\n                    )\n                    .join(\"  \");\n\n                return i === marker.i\n                    ? out.replace(`${markerChar} `, markerChar)\n                    : out;\n            })\n            .join(\"\\n\")\n    );\n}\n\n/**\n * Determine if input contains only valid LC4 or LS47 characters\n * @param {Array} input input array\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Boolean} indicating if input is valid LC4 or LS47\n */\nexport function validString(input, mode = \"lc4\") {\n    let alphabet = mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47;\n    return input.every(char => alphabet.indexOf(char) > -1);\n}\n"],"file":"helpers.js"}