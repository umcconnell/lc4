{"version":3,"file":"helpers.js","names":["ALPHABET","ALPHABET_LS47","GRIDSIZE","GRIDSIZE_LS47","escapeString","string","mode","replace","toLowerCase","filter","char","indexOf","join","shuffle","arr","slice","temp","i","l","length","Math","floor","random","randomElement","shiftRowRight","state","row","marker","size","j","shiftColumnDown","col","shiftRow","last","map","position","vector","column","printState","chara","JSON","parse","stringify","markerChar","console","log","out","validString","input","alphabet","every"],"sources":["../src/helpers.js"],"sourcesContent":["/** @module lc4/helpers */\nimport { ALPHABET, ALPHABET_LS47, GRIDSIZE, GRIDSIZE_LS47 } from \"./config.js\";\n\n/**\n * Escape string to valid LC4 or LS47 string\n * @param {String} string (invalid) LC4 or LS47 string\n * @param {String} [mode=\"lc4\"] Escape mode (either \"lc4\" or \"ls47\")\n * @example\n * escapeString(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 or LS47 string\n */\nexport function escapeString(string, mode = \"lc4\") {\n    if (mode === \"lc4\") string = string.replace(/0/g, \"#\").replace(/1/g, \"_\");\n\n    return [\n        ...string\n            .replace(/\\u00dc/g, \"Ue\")\n            .replace(/\\u00fc/g, \"ue\")\n            .replace(/\\u00c4/g, \"Ae\")\n            .replace(/\\u00e4/g, \"ae\")\n            .replace(/\\u00d6/g, \"Oe\")\n            .replace(/\\u00f6/g, \"oe\")\n            .replace(/\\u00df/g, \"ss\")\n            .replace(/\\s/g, \"_\")\n            .toLowerCase()\n    ]\n        .filter(\n            char =>\n                (mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET).indexOf(char) > -1\n        )\n        .join(\"\");\n}\n\n/**\n * Fisher-Yates array Shuffle\n * @param {Array} arr input array to be shuffled\n * @returns {Array} shuffled array\n */\nexport function shuffle(arr) {\n    // Copy the array\n    arr = arr.slice();\n\n    // Fisher-Yates Shuffle\n    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n    let l = arr.length,\n        temp,\n        i;\n\n    while (l) {\n        i = Math.floor(Math.random() * l--);\n\n        temp = arr[l];\n        arr[l] = arr[i];\n        arr[i] = temp;\n    }\n\n    return arr;\n}\n\n/**\n * Pick a random element from an array\n * @param {Array} arr input array to pick element from\n * @returns {*} a random element from the array\n */\nexport function randomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\n/**\n * Shift given row in the state matrix and move the marker if needed\n * @param {Array} state state matrix\n * @param {Number} row index of row to shift\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} updated state matrix\n */\nexport function shiftRowRight(state, row, marker, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE;\n\n    state[row] = [\n        state[row][state[row].length - 1],\n        ...state[row].slice(0, -1)\n    ];\n\n    if (marker.i === row) marker.j = (marker.j + 1) % size;\n\n    return state;\n}\n\n/**\n * Shift given column in the state matrix and move the marker if needed\n * @param {Array} state state matrix\n * @param {Number} col index of column to shift\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Array} updated state matrix\n */\nexport function shiftColumnDown(state, col, marker, mode = \"lc4\") {\n    let size = mode === \"ls47\" ? GRIDSIZE_LS47 : GRIDSIZE,\n        shiftRow = size - 1,\n        last = state[shiftRow][col];\n\n    state = state.map(row => {\n        let temp = row[col];\n        row[col] = last;\n        last = temp;\n        shiftRow = (shiftRow + 1) % size;\n        return row;\n    });\n\n    if (marker.j === col) marker.i = (marker.i + 1) % size;\n\n    return state;\n}\n\n/**\n * Return the coordinates of given search element in the state matrix\n * @param {*} char search element\n * @param {Array} state state matrix\n * @returns {Array} position vector in the form [`row`, `column`]\n */\nexport function position(char, state) {\n    let vector = [];\n\n    for (let row = 0; row < state.length; row++) {\n        let column = state[row].indexOf(char);\n\n        if (column > -1) {\n            vector = [row, column];\n            break;\n        }\n    }\n\n    return vector;\n}\n\n/**\n * Print out state for verbose mode\n * @param {Array} state state array to print out\n * @param {Object} chara input character reference being encrypted/decrypted\n * @param {Number} chara.row row of input character in the state matrix\n * (-1 for no input character)\n * @param {Number} chara.col column of input character in the state matrix\n * (-1 for no input character)\n * @param {Object} marker marker object representing active element\n * @param {Number} marker.i row of the marker in the state\n * @param {Number} marker.j column of the marker in the state\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {undefined}\n */\nexport function printState(state, chara, marker, mode = \"lc4\") {\n    // Deep-copy state\n    state = JSON.parse(JSON.stringify(state)).map(row =>\n        row.map(char => (mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)[char])\n    );\n\n    let markerChar = \"\\x1b[31m@\\x1b[0m\";\n    state[marker.i][marker.j] += markerChar;\n\n    console.log(\n        state\n            .map((row, i) => {\n                let out = row\n                    .map((char, j) =>\n                        i === chara.row || j === chara.col\n                            ? `\\x1b[32m${char}\\x1b[0m`\n                            : char\n                    )\n                    .join(\"  \");\n\n                return i === marker.i\n                    ? out.replace(`${markerChar} `, markerChar)\n                    : out;\n            })\n            .join(\"\\n\")\n    );\n}\n\n/**\n * Determine if input contains only valid LC4 or LS47 characters\n * @param {Array} input input array\n * @param {String} [mode=\"lc4\"] encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @returns {Boolean} indicating if input is valid LC4 or LS47\n */\nexport function validString(input, mode = \"lc4\") {\n    let alphabet = mode.toLowerCase() === \"lc4\" ? ALPHABET : ALPHABET_LS47;\n    return input.every(char => alphabet.indexOf(char) > -1);\n}\n"],"mappings":"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","ignoreList":[]}