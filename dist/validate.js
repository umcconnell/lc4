import{validString}from"./helpers.js";import{ALPHABET,ALPHABET_LS47}from"./config.js";export function validateMode(a){if("lc4"!==a.mode&&"ls47"!==a.mode)throw new TypeError("Invalid mode!\nMode may be either 'lc4' or 'ls47'.")}export function validateMsg(a){if(!a.message||0===a.message.length)throw new TypeError("You must specify a message to encrypt");else{if(Array.isArray(a.message))return a.message.filter(a=>""!==a).forEach(b=>validateMsg({message:b,mode:a.mode}));if(!validString([...a.message],a.mode))throw new TypeError("Message contains invalid characters!\nYou may only use following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET))}}export function validateHeaderData(a){if(a.headerData&&!validString([...a.headerData],a.mode))throw new TypeError("Invalid header data!\nHeader data may only contain following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET))}export function validateKey(a){if(!a.key)throw new TypeError("You must specify a (valid) key!\nYou may only use following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET));else if(!validString([...a.key],a.mode))throw new TypeError("Keyword for key generation contains invalid characters!\nYou may only use following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET));else if(a.key.length===("ls47"===a.mode?ALPHABET_LS47:ALPHABET).length&&Array.from(new Set([...a.key])).length!==a.key.length)throw new TypeError("Duplicate characters aren't allowed in key!")}export function validateNonce(a){if(a.nonce&&(!validString([...a.nonce],a.mode)||6>a.nonce.length))throw new TypeError("Invalid nonce!\nNonce may only contain following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET)+" and must be at least 6 characters long.")}export function validateSignature(a){if(a.signature&&(!validString([...a.signature],a.mode)||10>a.signature.length))throw new TypeError("Invalid signature!\nSignature may only contain following characters: "+("ls47"===a.mode?ALPHABET_LS47:ALPHABET)+" and must be at least 10 characters long.")}export function validateSettings(a){return[validateMode,validateMsg,validateHeaderData,validateKey,validateNonce,validateSignature].forEach(b=>b(a))}
//# sourceMappingURL=validate.js.map