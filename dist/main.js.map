{"version":3,"sources":["../src/main.js"],"names":["DEFAULT_SETTINGS","validateSettings","validateMode","escapeString","_escapeString","initState","encryptMsg","decryptMsg","generateKey","_generateKey","generateNonce","_generateNonce","encrypt","settings","Object","assign","mode","toLowerCase","message","headerData","env","state","key","marker","i","j","nonce","verbose","signature","decrypt","msg","endsWith","Error","keyword","length","escapeToLC4","string","escapeToLS47"],"mappings":"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","sourcesContent":["/** @module lc4 */\nimport { DEFAULT_SETTINGS } from \"./config.js\";\nimport { validateSettings, validateMode } from \"./validate.js\";\nimport { escapeString as _escapeString } from \"./helpers.js\";\n\nimport {\n    initState,\n    encryptMsg,\n    decryptMsg,\n    generateKey as _generateKey,\n    generateNonce as _generateNonce\n} from \"./lc4.js\";\n\n/**\n * Encrypt a message with LC4 or LS47\n * @param {Object} settings encryption settings\n * @param {String} [settings.mode=\"lc4\"] encryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} settings.message message to encrypt. Invalid LC4 or LS47\n * strings are escaped with the `escapeString` method\n * @param {String} settings.key valid LC4 or LS47 key\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature for signing the message\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n *     nonce: \"lorem_ipsum\"\n * });\n * @example <caption>Encrypt a message with a random key and LS47</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_ls47\",\n *     key: generateKey(null, \"ls47\"),\n *     nonce: \"lorem_ipsum\",\n *     mode: \"ls47\"\n * })\n * @example <caption>Encrypt and sign a message</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\", // will be escaped to lorem_ipsum\n *     key: generateKey(),\n *     nonce: generateNonce(),\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function encrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.message)\n        settings.message = _escapeString(settings.message, settings.mode);\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Encrypt message concatenated with signature\n    return encryptMsg(\n        env,\n        settings.message + (settings.signature || \"\"),\n        settings.verbose\n    );\n}\n\n/**\n * Decrypt a message with LC4 or LS47\n * @param {Object} settings decryption settings\n * @param {String} [settings.mode=\"lc4\"] decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} settings.message message to decrypt\n * @param {String} settings.key valid LC4 or LS47 key\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature of signed message\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Decrypt a message with a given key</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"v74hxj5pxmo\",\n *     key: \"igqehmd48pvxrl7k36y95j2sfnbo#wc_ztau\",\n *     nonce: \"lorem_ipsum\"\n * });\n *\n * //=> \"hello_world\"\n * @example <caption>Decrypt a message with a given key and LS47</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"8.bc-'suz+6l\",\n *     key: \"4un)pj0c6(h!ms+_-5q*vkt,zi?9xoglw:18e'.dy/rba73f2\",\n *     mode: \"ls47\"\n * })\n *\n * //=> \"hello_world!\"\n * @example <caption>Encrypt and sign a message</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"6q4ijz8p_qxbp5ys5w8qg_srnk3r\",\n *     key: \"notds7u_i3exc2wlbyzpa4g85#v9fqjkrmh6\",\n *     nonce: \"r#39_4kgpz\",\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n *\n * //=> \"lorem_ipsum#secret_signature\"\n * @throws {Error} Will throw error \"Invalid Signature\" if message doesn't end\n * with specified signature\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function decrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Decrypt message and signature\n    let msg = decryptMsg(env, settings.message, settings.verbose);\n\n    if (\n        settings.signature &&\n        !msg.endsWith(_escapeString(settings.signature, settings.mode))\n    )\n        throw new Error(\"Invalid signature\");\n\n    return msg;\n}\n\n/**\n * Generate a valid random LC4 or LS47 key\n * @param {String} [keyword=false] keyword to base key off (less secure) or\n * falsy value if key shouldn't be based off a keyword\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Generate a random LS47 key without keword</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey(null, \"ls47\");\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @throws {Error} Will throw an error if the keyword contains invalid LC4 or\n * LS47 characters\n * @returns {String} a valid LC4 or LS47 key\n */\nexport function generateKey(keyword, mode = \"lc4\") {\n    return _generateKey(keyword, mode);\n}\n\n/**\n * Generate a valid random LC4 or LS47 nonce\n * @param {Number} [length=10] length of nonce (at least 6)\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Encrypt a message with LS47 and a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum!\",\n *     key: generateKey(null, \"ls47\"),\n *     nonce: generateNonce(10, \"ls47\")\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 or LS47 nonce\n */\nexport function generateNonce(length, mode = \"lc4\") {\n    return _generateNonce(length, mode);\n}\n\n/**\n * Escape string to valid LC4 string\n * @param {String} string (invalid) LC4 string\n * @example\n * let { escapeToLC4 } = require(\"lc4\");\n * escapeToLC4(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 string\n */\nexport function escapeToLC4(string) {\n    return _escapeString(string, \"lc4\");\n}\n\n/**\n * Escape string to valid LS47 string\n * @param {String} string (invalid) LS47 string\n * @example\n * let { escapeToLS47 } = require(\"lc4\");\n * escapeToLS47(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world!_this_is_10th_test!\"\n * @returns {String} valid LS47 string\n */\nexport function escapeToLS47(string) {\n    return _escapeString(string, \"ls47\");\n}\n\n/**\n * Escapes a string to a valid LC4 or LS47 string\n * @param {String} string (invalid) LC4 or LS47 string\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"ls47\");\n *\n * //=> \"hello_world!_this_is_10th_test!\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"lc4\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 or LS47 string\n */\nexport function escapeString(string, mode) {\n    return _escapeString(string, mode);\n}\n"],"file":"main.js"}