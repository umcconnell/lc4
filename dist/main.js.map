{"version":3,"sources":["../src/main.js"],"names":["DEFAULT_SETTINGS","validateSettings","escapeToLC4","_escapeToLC4","initState","encryptMsg","decryptMsg","generateKey","_generateKey","generateNonce","_generateNonce","encrypt","settings","Object","assign","message","headerData","env","state","key","marker","i","j","nonce","verbose","signature","decrypt","msg","endsWith","Error","keyword","length","string"],"mappings":"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","sourcesContent":["/** @module lc4 */\nimport { DEFAULT_SETTINGS } from \"./config.js\";\nimport { validateSettings } from \"./validate.js\";\nimport { escapeToLC4 as _escapeToLC4 } from \"./helpers.js\";\n\nimport {\n    initState,\n    encryptMsg,\n    decryptMsg,\n    generateKey as _generateKey,\n    generateNonce as _generateNonce\n} from \"./lc4.js\";\n\n/**\n * Encrypt a message with LC4\n * @param {Object} settings encryption settings\n * @param {String} settings.message message to encrypt. Invalid LC4 strings are\n * escaped with the `escapeToLC4` method\n * @param {String} settings.key valid LC4 key\n * @param {String} [settings.nonce=null] valid LC4 nonce\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature for signing the message\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n *     nonce: \"lorem_ipsum\"\n * });\n *\n * @example <caption>Encrypt and sign a message</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\", // will be escaped to lorem_ipsum\n *     key: generateKey(),\n *     nonce: generateNonce(),\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function encrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    if (settings.message) settings.message = _escapeToLC4(settings.message);\n    if (settings.headerData)\n        settings.headerData = _escapeToLC4(settings.headerData);\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key),\n        marker: { i: 0, j: 0 }\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Encrypt message concatenated with signature\n    return encryptMsg(\n        env,\n        settings.message + (settings.signature || \"\"),\n        settings.verbose\n    );\n}\n\n/**\n * Decrypt a message with LC4\n * @param {Object} settings decryption settings\n * @param {String} settings.message message to decrypt\n * @param {String} settings.key valid LC4 key\n * @param {String} [settings.nonce=null] valid LC4 nonce\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature of signed message\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Decrypt a message with a given key</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"v74hxj5pxmo\",\n *     key: \"igqehmd48pvxrl7k36y95j2sfnbo#wc_ztau\",\n *     nonce: \"lorem_ipsum\"\n * });\n *\n * //=> \"hello_world\"\n * @example <caption>Encrypt and sign a message</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"6q4ijz8p_qxbp5ys5w8qg_srnk3r\",\n *     key: \"notds7u_i3exc2wlbyzpa4g85#v9fqjkrmh6\",\n *     nonce: \"r#39_4kgpz\",\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n *\n * //=> \"lorem_ipsum#secret_signature\"\n * @throws {Error} Will throw error \"Invalid Signature\" if message doesn't end\n * with specified signature\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function decrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    if (settings.headerData)\n        settings.headerData = _escapeToLC4(settings.headerData);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key),\n        marker: { i: 0, j: 0 }\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Decrypt message and signature\n    let msg = decryptMsg(env, settings.message, settings.verbose);\n\n    if (settings.signature && !msg.endsWith(_escapeToLC4(settings.signature)))\n        throw new Error(\"Invalid signature\");\n\n    return msg;\n}\n\n/**\n * Generate a valid random LC4 key\n * @param {String} [keyword=false] keyword to base key off (less secure)\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @throws {Error} Will throw an error if the keyword contains invalid LC4\n * characters\n * @returns {String} a valid LC4 key\n */\nexport function generateKey(keyword) {\n    return _generateKey(keyword);\n}\n\n/**\n * Generate a valid random LC4 nonce\n * @param {Number} [length=10] length of nonce (at least 6)\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Encrypt a message with a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\",\n *     key: generateKey(),\n *     nonce: generateNonce()\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 nonce\n */\nexport function generateNonce(length) {\n    return _generateNonce(length);\n}\n\n/**\n * Escape string to valid LC4 string\n * @param {String} string (invalid) LC4 string\n * @example\n * let { escapeToLC4 } = require(\"lc4\");\n * escapeToLC4(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 string\n */\nexport function escapeToLC4(string) {\n    return _escapeToLC4(string);\n}\n"],"file":"main.js"}