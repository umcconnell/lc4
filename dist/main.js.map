{"version":3,"file":"main.js","names":["DEFAULT_SETTINGS","validateSettings","validateMode","escapeString","_escapeString","initState","encryptMsg","decryptMsg","generateKey","_generateKey","generateNonce","_generateNonce","encrypt","settings","Object","assign","mode","toLowerCase","message","Array","isArray","map","line","headerData","env","state","key","marker","i","j","nonce","verbose","signature","concat","decrypt","msg","length","endsWith","Error","escapeToLC4","string","escapeToLS47"],"sources":["../src/main.js"],"sourcesContent":["/** @module lc4 */\nimport { DEFAULT_SETTINGS } from \"./config.js\";\nimport { validateSettings, validateMode } from \"./validate.js\";\nimport { escapeString as _escapeString } from \"./helpers.js\";\n\nimport {\n    initState,\n    encryptMsg,\n    decryptMsg,\n    generateKey as _generateKey,\n    generateNonce as _generateNonce\n} from \"./lc4.js\";\n\n/**\n * Encrypt a message with LC4 or LS47\n * @param {Object} settings encryption settings\n * @param {String} [settings.mode=\"lc4\"] encryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {(String|Array)} settings.message message or array of messages to\n * encrypt. Invalid LC4 or LS47 strings are escaped with the `escapeString`\n * method\n * @param {String} settings.key valid LC4 or LS47 key or password; If a\n * password is passed, the key/state will be expanded from the password\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce (> 5\n * characters)\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature for signing the message\n * (> 9 characters)\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n *     nonce: \"lorem_ipsum\"\n * });\n * @example <caption>Encrypt a multiline message with a random key and LS47</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: [ \"hello\", \"ls47\" ],\n *     key: generateKey(\"ls47\"),\n *     nonce: \"lorem_ipsum\",\n *     mode: \"ls47\"\n * })\n * @example <caption>Encrypt and sign a message</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\", // will be escaped to lorem_ipsum\n *     key: \"my_super_secret_password\",\n *     nonce: generateNonce(),\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function encrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.message)\n        settings.message = Array.isArray(settings.message)\n            ? settings.message.map(line => _escapeString(line, settings.mode))\n            : _escapeString(settings.message, settings.mode);\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Encrypt message concatenated with signature\n    if (Array.isArray(settings.message))\n        return (\n            settings.signature\n                ? settings.message.concat(settings.signature)\n                : settings.message\n        ).map(line => encryptMsg(env, line, settings.verbose));\n    else\n        return encryptMsg(\n            env,\n            settings.message + (settings.signature || \"\"),\n            settings.verbose\n        );\n}\n\n/**\n * Decrypt a message with LC4 or LS47\n * @param {Object} settings decryption settings\n * @param {String} [settings.mode=\"lc4\"] decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {(String|Array)} settings.message message or array of multiline\n * message to decrypt; When decrypting a multiline message with a signature the\n * signature must be the last element of the array\n * @param {String} settings.key valid LC4 or LS47 key or password; If a\n * password is passed, the key/state will be expanded from the password\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce (> 5\n * characters)\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature of signed message\n * (> 9 characters)\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Decrypt a message with a given key</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"v74hxj5pxmo\",\n *     key: \"igqehmd48pvxrl7k36y95j2sfnbo#wc_ztau\",\n *     nonce: \"lorem_ipsum\"\n * });\n *\n * //=> \"hello_world\"\n * @example <caption>Decrypt a message with a given key and LS47</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"8.bc-'suz+6l\",\n *     key: \"4un)pj0c6(h!ms+_-5q*vkt,zi?9xoglw:18e'.dy/rba73f2\",\n *     mode: \"ls47\"\n * })\n *\n * //=> \"hello_world!\"\n * @example <caption>Decrypt a multiline, signed message</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: [ '6q4ij', 'p9597', 'bc8p325u2jc_d9xfw' ],\n *     key: \"notds7u_i3exc2wlbyzpa4g85#v9fqjkrmh6\",\n *     nonce: \"r#39_4kgpz\",\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n *\n * //=> [\"lorem\", \"ipsum\", \"#secret_signature\"]\n * @throws {Error} Will throw error \"Invalid Signature\" if message doesn't end\n * with specified signature\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function decrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Decrypt message and signature\n    let msg;\n    if (Array.isArray(settings.message))\n        msg = settings.message.map(line =>\n            decryptMsg(env, line, settings.verbose)\n        );\n    else msg = decryptMsg(env, settings.message, settings.verbose);\n\n    if (\n        settings.signature &&\n        (Array.isArray(msg)\n            ? msg[msg.length - 1] !==\n              _escapeString(settings.signature, settings.mode)\n            : !msg.endsWith(_escapeString(settings.signature, settings.mode)))\n    )\n        throw new Error(\"Invalid signature\");\n\n    return msg;\n}\n\n/**\n * Generate a valid random LC4 or LS47 key\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Generate a random LS47 key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey(\"ls47\");\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @returns {String} a valid LC4 or LS47 key\n */\nexport function generateKey(mode = \"lc4\") {\n    return _generateKey(mode);\n}\n\n/**\n * Generate a valid random LC4 or LS47 nonce\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @param {Number} [length=10] length of nonce (at least 6)\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Encrypt a message with LS47 and a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum!\",\n *     key: generateKey(\"ls47\"),\n *     nonce: generateNonce(\"ls47\")\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 or LS47 nonce\n */\nexport function generateNonce(mode = \"lc4\", length) {\n    return _generateNonce(mode, length);\n}\n\n/**\n * Escape string to valid LC4 string\n * @param {String} string (invalid) LC4 string\n * @example\n * let { escapeToLC4 } = require(\"lc4\");\n * escapeToLC4(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 string\n */\nexport function escapeToLC4(string) {\n    return _escapeString(string, \"lc4\");\n}\n\n/**\n * Escape string to valid LS47 string\n * @param {String} string (invalid) LS47 string\n * @example\n * let { escapeToLS47 } = require(\"lc4\");\n * escapeToLS47(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world!_this_is_the_10th_test!\"\n * @returns {String} valid LS47 string\n */\nexport function escapeToLS47(string) {\n    return _escapeString(string, \"ls47\");\n}\n\n/**\n * Escapes a string to a valid LC4 or LS47 string\n * @param {String} string (invalid) LC4 or LS47 string\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"ls47\");\n *\n * //=> \"hello_world!_this_is_the_10th_test!\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"lc4\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 or LS47 string\n */\nexport function escapeString(string, mode) {\n    return _escapeString(string, mode);\n}\n"],"mappings":"AACA,OAASA,gBAAgB,KAAQ,aAAa,CAC9C,OAASC,gBAAgB,CAAEC,YAAY,KAAQ,eAAe,CAC9D,OAASC,YAAY,GAAIC,cAAa,KAAQ,cAAc,CAE5D,OACIC,SAAS,CACTC,UAAU,CACVC,UAAU,CACVC,WAAW,GAAIC,aAAY,CAC3BC,aAAa,GAAIC,eAAc,KAC5B,UAAU,CAkDjB,MAAO,SAASC,QAAO,CAACC,CAAQ,CAAE,CAC9BA,CAAQ,CAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAEf,gBAAgB,CAAEa,CAAQ,CAAC,CAExDA,CAAQ,CAACG,IAAI,CAAGH,CAAQ,CAACG,IAAI,CAACC,WAAW,EAAE,CAC3Cf,YAAY,CAACW,CAAQ,CAAC,CAElBA,CAAQ,CAACK,OAAO,GAChBL,CAAQ,CAACK,OAAO,CAAGC,KAAK,CAACC,OAAO,CAACP,CAAQ,CAACK,OAAO,CAAC,CAC5CL,CAAQ,CAACK,OAAO,CAACG,GAAG,CAACC,CAAI,EAAIlB,aAAa,CAACkB,CAAI,CAAET,CAAQ,CAACG,IAAI,CAAC,CAAC,CAChEZ,aAAa,CAACS,CAAQ,CAACK,OAAO,CAAEL,CAAQ,CAACG,IAAI,CAAC,EACpDH,CAAQ,CAACU,UAAU,GACnBV,CAAQ,CAACU,UAAU,CAAGnB,aAAa,CAACS,CAAQ,CAACU,UAAU,CAAEV,CAAQ,CAACG,IAAI,CAAC,EAE3Ef,gBAAgB,CAACY,CAAQ,CAAC,CAE1B,GAAIW,EAAG,CAAG,CACNC,KAAK,CAAEpB,SAAS,CAACQ,CAAQ,CAACa,GAAG,CAAEb,CAAQ,CAACG,IAAI,CAAC,CAC7CW,MAAM,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CACtBb,IAAI,CAAEH,CAAQ,CAACG,IACnB,CAAC,CAAC,MAGEH,EAAQ,CAACiB,KAAK,EAAExB,UAAU,CAACkB,CAAG,CAAEX,CAAQ,CAACiB,KAAK,CAAEjB,CAAQ,CAACkB,OAAO,CAAC,CAEjElB,CAAQ,CAACU,UAAU,EACnBjB,UAAU,CAACkB,CAAG,CAAEX,CAAQ,CAACU,UAAU,CAAEV,CAAQ,CAACkB,OAAO,CAAC,CAEtDZ,KAAK,CAACC,OAAO,CAACP,CAAQ,CAACK,OAAO,CAAC,CACxB,CACHL,CAAQ,CAACmB,SAAS,CACZnB,CAAQ,CAACK,OAAO,CAACe,MAAM,CAACpB,CAAQ,CAACmB,SAAS,CAAC,CAC3CnB,CAAQ,CAACK,OAAO,EACxBG,GAAG,CAACC,CAAI,EAAIhB,UAAU,CAACkB,CAAG,CAAEF,CAAI,CAAET,CAAQ,CAACkB,OAAO,CAAC,CAAC,CAE/CzB,UAAU,CACbkB,CAAG,CACHX,CAAQ,CAACK,OAAO,EAAIL,CAAQ,CAACmB,SAAS,EAAI,EAAE,CAAC,CAC7CnB,CAAQ,CAACkB,OAAO,CAE5B,CAyDA,MAAO,SAASG,QAAO,CAACrB,CAAQ,CAAE,CAC9BA,CAAQ,CAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAEf,gBAAgB,CAAEa,CAAQ,CAAC,CAExDA,CAAQ,CAACG,IAAI,CAAGH,CAAQ,CAACG,IAAI,CAACC,WAAW,EAAE,CAC3Cf,YAAY,CAACW,CAAQ,CAAC,CAElBA,CAAQ,CAACU,UAAU,GACnBV,CAAQ,CAACU,UAAU,CAAGnB,aAAa,CAACS,CAAQ,CAACU,UAAU,CAAEV,CAAQ,CAACG,IAAI,CAAC,EAE3Ef,gBAAgB,CAACY,CAAQ,CAAC,CAE1B,GAAIW,EAAG,CAAG,CACNC,KAAK,CAAEpB,SAAS,CAACQ,CAAQ,CAACa,GAAG,CAAEb,CAAQ,CAACG,IAAI,CAAC,CAC7CW,MAAM,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CACtBb,IAAI,CAAEH,CAAQ,CAACG,IACnB,CAAC,CAGGH,CAAQ,CAACiB,KAAK,EAAExB,UAAU,CAACkB,CAAG,CAAEX,CAAQ,CAACiB,KAAK,CAAEjB,CAAQ,CAACkB,OAAO,CAAC,CAEjElB,CAAQ,CAACU,UAAU,EACnBjB,UAAU,CAACkB,CAAG,CAAEX,CAAQ,CAACU,UAAU,CAAEV,CAAQ,CAACkB,OAAO,CAAC,CAE1D,GAAII,EAAG,CAOP,GALIA,CAAG,CADHhB,KAAK,CAACC,OAAO,CAACP,CAAQ,CAACK,OAAO,CAAC,CACzBL,CAAQ,CAACK,OAAO,CAACG,GAAG,CAACC,CAAI,EAC3Bf,UAAU,CAACiB,CAAG,CAAEF,CAAI,CAAET,CAAQ,CAACkB,OAAO,CAAC,CAC1C,CACMxB,UAAU,CAACiB,CAAG,CAAEX,CAAQ,CAACK,OAAO,CAAEL,CAAQ,CAACkB,OAAO,CAAC,CAG1DlB,CAAQ,CAACmB,SAAS,GACjBb,KAAK,CAACC,OAAO,CAACe,CAAG,CAAC,CACbA,CAAG,CAACA,CAAG,CAACC,MAAM,CAAG,CAAC,CAAC,GACnBhC,aAAa,CAACS,CAAQ,CAACmB,SAAS,CAAEnB,CAAQ,CAACG,IAAI,CAAC,CAChD,CAACmB,CAAG,CAACE,QAAQ,CAACjC,aAAa,CAACS,CAAQ,CAACmB,SAAS,CAAEnB,CAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAEtE,KAAM,IAAIsB,MAAK,CAAC,mBAAmB,CAAC,CAExC,MAAOH,EACX,CAuBA,MAAO,SAAS3B,YAAW,CAACQ,CAAI,CAAG,KAAK,CAAE,CACtC,MAAOP,aAAY,CAACO,CAAI,CAC5B,CAsBA,MAAO,SAASN,cAAa,CAACM,CAAI,CAAG,KAAK,CAAEoB,CAAM,CAAE,CAChD,MAAOzB,eAAc,CAACK,CAAI,CAAEoB,CAAM,CACtC,CAYA,MAAO,SAASG,YAAW,CAACC,CAAM,CAAE,CAChC,MAAOpC,cAAa,CAACoC,CAAM,CAAE,KAAK,CACtC,CAYA,MAAO,SAASC,aAAY,CAACD,CAAM,CAAE,CACjC,MAAOpC,cAAa,CAACoC,CAAM,CAAE,MAAM,CACvC,CAmBA,MAAO,SAASrC,aAAY,CAACqC,CAAM,CAAExB,CAAI,CAAE,CACvC,MAAOZ,cAAa,CAACoC,CAAM,CAAExB,CAAI,CACrC"}