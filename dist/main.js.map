{"version":3,"sources":["../src/main.js"],"names":["DEFAULT_SETTINGS","validateSettings","validateMode","escapeString","_escapeString","initState","encryptMsg","decryptMsg","generateKey","_generateKey","generateNonce","_generateNonce","encrypt","settings","Object","assign","mode","toLowerCase","message","Array","isArray","map","line","headerData","env","state","key","marker","i","j","nonce","verbose","signature","concat","decrypt","msg","length","endsWith","Error","escapeToLC4","string","escapeToLS47"],"mappings":"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","sourcesContent":["/** @module lc4 */\nimport { DEFAULT_SETTINGS } from \"./config.js\";\nimport { validateSettings, validateMode } from \"./validate.js\";\nimport { escapeString as _escapeString } from \"./helpers.js\";\n\nimport {\n    initState,\n    encryptMsg,\n    decryptMsg,\n    generateKey as _generateKey,\n    generateNonce as _generateNonce\n} from \"./lc4.js\";\n\n/**\n * Encrypt a message with LC4 or LS47\n * @param {Object} settings encryption settings\n * @param {String} [settings.mode=\"lc4\"] encryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {(String|Array)} settings.message message or array of messages to\n * encrypt. Invalid LC4 or LS47 strings are escaped with the `escapeString`\n * method\n * @param {String} settings.key valid LC4 or LS47 key or password; If a\n * password is passed, the key/state will be expanded from the password\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce (> 5\n * characters)\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature for signing the message\n * (> 9 characters)\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n *     nonce: \"lorem_ipsum\"\n * });\n * @example <caption>Encrypt a multiline message with a random key and LS47</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: [ \"hello\", \"ls47\" ],\n *     key: generateKey(\"ls47\"),\n *     nonce: \"lorem_ipsum\",\n *     mode: \"ls47\"\n * })\n * @example <caption>Encrypt and sign a message</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum\", // will be escaped to lorem_ipsum\n *     key: \"my_super_secret_password\",\n *     nonce: generateNonce(),\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function encrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.message)\n        settings.message = Array.isArray(settings.message)\n            ? settings.message.map(line => _escapeString(line, settings.mode))\n            : _escapeString(settings.message, settings.mode);\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Encrypt message concatenated with signature\n    if (Array.isArray(settings.message))\n        return (settings.signature\n            ? settings.message.concat(settings.signature)\n            : settings.message\n        ).map(line => encryptMsg(env, line, settings.verbose));\n    else\n        return encryptMsg(\n            env,\n            settings.message + (settings.signature || \"\"),\n            settings.verbose\n        );\n}\n\n/**\n * Decrypt a message with LC4 or LS47\n * @param {Object} settings decryption settings\n * @param {String} [settings.mode=\"lc4\"] decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {(String|Array)} settings.message message or array of multiline\n * message to decrypt; When decrypting a multiline message with a signature the\n * signature must be the last element of the array\n * @param {String} settings.key valid LC4 or LS47 key or password; If a\n * password is passed, the key/state will be expanded from the password\n * @param {String} [settings.nonce=null] valid LC4 or LS47 nonce (> 5\n * characters)\n * @param {String} [settings.headerData=null] header data\n * @param {String} [settings.signature=null] signature of signed message\n * (> 9 characters)\n * @param {Boolean} [settings.verbose=false] boolean indicating whether verbose\n * mode should be used (will print intermediate steps to console)\n * @example <caption>Decrypt a message with a given key</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"v74hxj5pxmo\",\n *     key: \"igqehmd48pvxrl7k36y95j2sfnbo#wc_ztau\",\n *     nonce: \"lorem_ipsum\"\n * });\n *\n * //=> \"hello_world\"\n * @example <caption>Decrypt a message with a given key and LS47</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: \"8.bc-'suz+6l\",\n *     key: \"4un)pj0c6(h!ms+_-5q*vkt,zi?9xoglw:18e'.dy/rba73f2\",\n *     mode: \"ls47\"\n * })\n *\n * //=> \"hello_world!\"\n * @example <caption>Decrypt a multiline, signed message</caption>\n * const { decrypt } = require(\"lc4\");\n *\n * decrypt({\n *     message: [ '6q4ij', 'p9597', 'bc8p325u2jc_d9xfw' ],\n *     key: \"notds7u_i3exc2wlbyzpa4g85#v9fqjkrmh6\",\n *     nonce: \"r#39_4kgpz\",\n *     signature: \"#secret_signature\",\n *     verbose: true\n * });\n *\n * //=> [\"lorem\", \"ipsum\", \"#secret_signature\"]\n * @throws {Error} Will throw error \"Invalid Signature\" if message doesn't end\n * with specified signature\n * @throws {TypeError} Will throw a type error if settings are invalid or\n * missing\n * @returns {String} the encrypted (and signed) message\n */\nexport function decrypt(settings) {\n    settings = Object.assign({}, DEFAULT_SETTINGS, settings);\n\n    settings.mode = settings.mode.toLowerCase();\n    validateMode(settings);\n\n    if (settings.headerData)\n        settings.headerData = _escapeString(settings.headerData, settings.mode);\n\n    validateSettings(settings);\n\n    let env = {\n        state: initState(settings.key, settings.mode),\n        marker: { i: 0, j: 0 },\n        mode: settings.mode\n    };\n\n    // Encrypt nonce and discard\n    if (settings.nonce) encryptMsg(env, settings.nonce, settings.verbose);\n    // Encrypt header data and discard\n    if (settings.headerData)\n        encryptMsg(env, settings.headerData, settings.verbose);\n    // Decrypt message and signature\n    let msg;\n    if (Array.isArray(settings.message))\n        msg = settings.message.map(line =>\n            decryptMsg(env, line, settings.verbose)\n        );\n    else msg = decryptMsg(env, settings.message, settings.verbose);\n\n    if (\n        settings.signature &&\n        (Array.isArray(msg)\n            ? msg[msg.length - 1] !==\n              _escapeString(settings.signature, settings.mode)\n            : !msg.endsWith(_escapeString(settings.signature, settings.mode)))\n    )\n        throw new Error(\"Invalid signature\");\n\n    return msg;\n}\n\n/**\n * Generate a valid random LC4 or LS47 key\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example <caption>Generate a random key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey();\n * @example <caption>Generate a random LS47 key</caption>\n * let { generateKey } = require(\"lc4\");\n *\n * generateKey(\"ls47\");\n * @example <caption>Encrypt a message with a random key</caption>\n * const { encrypt, generateKey } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"hello_world\",\n *     key: generateKey(),\n * });\n * @returns {String} a valid LC4 or LS47 key\n */\nexport function generateKey(mode = \"lc4\") {\n    return _generateKey(mode);\n}\n\n/**\n * Generate a valid random LC4 or LS47 nonce\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @param {Number} [length=10] length of nonce (at least 6)\n * @example <caption>Generate a random nonce</caption>\n * let { generateNonce } = require(\"lc4\");\n *\n * generateNonce();\n * @example <caption>Encrypt a message with LS47 and a random nonce</caption>\n * const { encrypt, generateKey, generateNonce } = require(\"lc4\");\n *\n * encrypt({\n *     message: \"Lorem Ipsum!\",\n *     key: generateKey(\"ls47\"),\n *     nonce: generateNonce(\"ls47\")\n * })\n * @throws {Error} Will throw an error if length is smaller than 6\n * @returns {String} a valid LC4 or LS47 nonce\n */\nexport function generateNonce(mode = \"lc4\", length) {\n    return _generateNonce(mode, length);\n}\n\n/**\n * Escape string to valid LC4 string\n * @param {String} string (invalid) LC4 string\n * @example\n * let { escapeToLC4 } = require(\"lc4\");\n * escapeToLC4(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 string\n */\nexport function escapeToLC4(string) {\n    return _escapeString(string, \"lc4\");\n}\n\n/**\n * Escape string to valid LS47 string\n * @param {String} string (invalid) LS47 string\n * @example\n * let { escapeToLS47 } = require(\"lc4\");\n * escapeToLS47(\"Hello World! This is the 10th test!\");\n *\n * //=> \"hello_world!_this_is_the_10th_test!\"\n * @returns {String} valid LS47 string\n */\nexport function escapeToLS47(string) {\n    return _escapeString(string, \"ls47\");\n}\n\n/**\n * Escapes a string to a valid LC4 or LS47 string\n * @param {String} string (invalid) LC4 or LS47 string\n * @param {String} [mode=\"lc4\"] encryption/decryption mode. Can be either \"lc4\"\n * or \"ls47\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"ls47\");\n *\n * //=> \"hello_world!_this_is_the_10th_test!\"\n * @example\n * let { escapeString } = require(\"lc4\");\n * escapeString(\"Hello World! This is the 10th test!\", \"lc4\");\n *\n * //=> \"hello_world_this_is_the__#th_test\"\n * @returns {String} valid LC4 or LS47 string\n */\nexport function escapeString(string, mode) {\n    return _escapeString(string, mode);\n}\n"],"file":"main.js"}