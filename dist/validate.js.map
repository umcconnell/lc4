{"version":3,"file":"validate.js","names":["validString","ALPHABET","ALPHABET_LS47","validateMode","settings","mode","TypeError","validateMsg","message","length","Array","isArray","filter","line","forEach","validateHeaderData","headerData","validateKey","key","from","Set","validateNonce","nonce","validateSignature","signature","validateSettings","validator"],"sources":["../src/validate.js"],"sourcesContent":["/** @module lc4/validate */\nimport { validString } from \"./helpers.js\";\nimport { ALPHABET, ALPHABET_LS47 } from \"./config.js\";\n\n/**\n * Validates the mode option of the settings\n * @param {Object} settings settings object\n * @param {String} settings.mode encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @throws {TypeError} when settings.mode is invalid\n * @returns {undefined}\n */\nexport function validateMode(settings) {\n    if (!(settings.mode === \"lc4\" || settings.mode === \"ls47\")) {\n        throw new TypeError(\n            \"Invalid mode!\\n\" + \"Mode may be either 'lc4' or 'ls47'.\"\n        );\n    }\n}\n\n/**\n * Validates the message of the settings\n * @param {Object} settings settings object\n * @param {(String|Array)} settings.message valid LC4 or LS47 message or array\n * of valid strings\n * @param {String} [settings.mode=\"lc4\"] encryption/decryption algorithm. Can be\n * either \"lc4\" or \"ls47\"\n * @throws {TypeError} when no message is specified or the message is invalid\n * @return {undefined}\n */\nexport function validateMsg(settings) {\n    if (!settings.message || settings.message.length === 0) {\n        throw new TypeError(\"You must specify a message to encrypt\");\n    } else if (Array.isArray(settings.message)) {\n        return (\n            settings.message\n                // Allow empty lines\n                .filter(line => line !== \"\")\n                .forEach(line =>\n                    validateMsg({ message: line, mode: settings.mode })\n                )\n        );\n    } else if (!validString([...settings.message], settings.mode)) {\n        throw new TypeError(\n            \"Message contains invalid characters!\\n\" +\n                \"You may only use following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)\n        );\n    }\n}\n\n/**\n * Validates the headerDate option of the settings\n * @param {Object} settings settings object\n * @param {String} [settings.headerData=null] optional valid header data\n * @param {String} [settings.mode=\"lc4\"] encryption/decryption algorithm. Can be\n * either \"lc4\" or \"ls47\"\n * @throws {TypeError} when header data is specified but contains illegal\n * characters\n * @returns {undefined}\n */\nexport function validateHeaderData(settings) {\n    if (\n        settings.headerData &&\n        !validString([...settings.headerData], settings.mode)\n    ) {\n        throw new TypeError(\n            \"Invalid header data!\\n\" +\n                \"Header data may only contain following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)\n        );\n    }\n}\n\n/**\n * Validates the key of the settings\n * @param {Object} settings settings object\n * @param {String} settings.key valid key (no illegal characters, no duplicate\n * characters if as long as alphabet) or password\n * @param {String} [settings.mode=\"lc4\"] encryption/decryption algorithm. Can be\n * either \"lc4\" or \"ls47\"\n * @throws {TypeError} when key is not specified, too short or contains illegal\n * characters\n * @returns {undefined}\n */\nexport function validateKey(settings) {\n    if (!settings.key) {\n        throw new TypeError(\n            \"You must specify a (valid) key!\\n\" +\n                \"You may only use following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)\n        );\n    } else if (!validString([...settings.key], settings.mode)) {\n        throw new TypeError(\n            \"Keyword for key generation contains invalid characters!\\n\" +\n                \"You may only use following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET)\n        );\n    } else if (\n        settings.key.length ===\n            (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET).length &&\n        Array.from(new Set([...settings.key])).length !== settings.key.length\n    ) {\n        throw new TypeError(\"Duplicate characters aren't allowed in key!\");\n    }\n}\n\n/**\n * Validates nonce option of the settings\n * @param {Object} settings settings object\n * @param {String} [settings.nonce=null] optional valid nonce\n * @param {String} [settings.mode=\"lc4\"] encryption/decryption algorithm. Can be\n * either \"lc4\" or \"ls47\"\n * @throws {TypeError} when nonce is specified and too short (< 6 characters) or\n * contains illegal characters\n * @returns {undefined}\n */\nexport function validateNonce(settings) {\n    if (\n        settings.nonce &&\n        (!validString([...settings.nonce], settings.mode) ||\n            settings.nonce.length < 6)\n    ) {\n        throw new TypeError(\n            \"Invalid nonce!\\n\" +\n                \"Nonce may only contain following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET) +\n                \" and must be at least 6 characters long.\"\n        );\n    }\n}\n\n/**\n * Validates signature option of the settings\n * @param {Object} settings settings object\n * @param {String} [settings.signature=null] optional valid signature\n * @param {String} [settings.mode=\"lc4\"] encryption/decryption algorithm. Can be\n * either \"lc4\" or \"ls47\"\n * @throws {TypeError} when signature is specified and too short (< 10\n * characters) or contains illegal characters\n * @returns {undefined}\n */\nexport function validateSignature(settings) {\n    if (\n        settings.signature &&\n        (!validString([...settings.signature], settings.mode) ||\n            settings.signature.length < 10)\n    ) {\n        throw new TypeError(\n            \"Invalid signature!\\n\" +\n                \"Signature may only contain following characters: \" +\n                (settings.mode === \"ls47\" ? ALPHABET_LS47 : ALPHABET) +\n                \" and must be at least 10 characters long.\"\n        );\n    }\n}\n\n/**\n * Validate encryption/decryption LC4 settings\n * @param {Object} settings LC4 settings message\n * @param {String} settings.mode encryption/decryption algorithm. Can be either\n * \"lc4\" or \"ls47\"\n * @param {String} settings.message valid LC4 or LS47 string\n * @param {String} settings.key valid LC4 or LS47 string\n * @param {String} [settings.signature=null] valid LC4 or LS47 string (at least\n * 10 characters long)\n * @param {String} [settings.headerData=null] valid LC4 or LS47 string\n * @param {String} [settings.nonce=null] valid LC4 or LS47 string (at least 6\n * characters long)\n * @throws {TypeError} When message and/or key and/or mode is missing or if\n * invalid value (invalid LC4 or LS47 string) is passed\n * @returns {undefined}\n */\nexport function validateSettings(settings) {\n    return [\n        validateMode,\n        validateMsg,\n        validateHeaderData,\n        validateKey,\n        validateNonce,\n        validateSignature\n    ].forEach(validator => validator(settings));\n}\n"],"mappings":"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"}